QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numberic()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
items <- sample(10, 10, replace = T)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
# return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(c(listSmaller, items[pivot], listLarger))
}
return(c(listSmaller, items[pivot], listLarger))
}
QuickSort(items)
items <- sample(10, 10, replace = T)
Compare <- function(left, right){
lenLeft <- length(left)
lenRight <- length(right)
listNew <- as.numeric()
i_left <- 1
i_right <- 1
for (i in 1:(lenLeft + lenRight)){
if ((left[i_left] < right[i_right] && i_left <= i_left) || i_right > lenRight){
listNew[i] <- left[i_left]
i_left <- i_left + 1
} else {
listNew[i] <- right[i_right]
i_right <- i_right + 1
}
}
return (listNew)
}
Divide <- function(items){
len <- length(items)
listLeft <- as.numeric()
listRight <- as.numeric()
if (len > 1){
listLeft <- items[1:floor(len/2)]
listRight <- items[(floor(len/2) + 1):len]
listLeft <- Divide(listLeft)
listRight <- Divide(listRight)
items <- Compare(listLeft, listRight)
}
return (items)
}
Divide(items)
items <- sample(10, 10, replace = T)
Compare <- function(left, right){
lenLeft <- length(left)
lenRight <- length(right)
listNew <- as.numeric()
i_left <- 1
i_right <- 1
for (i in 1:(lenLeft + lenRight)){
if ((left[i_left] < right[i_right] && i_left <= lenLeft) || i_right > lenRight){
listNew[i] <- left[i_left]
i_left <- i_left + 1
} else {
listNew[i] <- right[i_right]
i_right <- i_right + 1
}
}
return (listNew)
}
Divide <- function(items){
len <- length(items)
listLeft <- as.numeric()
listRight <- as.numeric()
if (len > 1){
listLeft <- items[1:floor(len/2)]
listRight <- items[(floor(len/2) + 1):len]
listLeft <- Divide(listLeft)
listRight <- Divide(listRight)
items <- Compare(listLeft, listRight)
}
return (items)
}
Divide(items)
14%%2
14%%3
FindPrime <- function(range){
list <- as.numeric()
for (i in 1:range){
flag <- 0
for (j in 2:i){
if (i %% j == 0){
flag <- flag + 1
}
}
if (flag == 1) {
list <- c(list, i)
}
}
return (list)
}
FindPrime(100)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2], f[i - 1])
}
return f[n]
}
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2], f[i - 1])
}
return (f[n])
}
FindPrime(4)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2] + f[i - 1])
}
return (f[n])
}
FindPrime(4)
FindFibonaci(4)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- c(f, f[i - 2] + f[i - 1])
}
return (f[n])
}
FindFibonaci(4)
FindFibonaci(8)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1))
print (printer)
}
}
Pyramid1(3)
?paste
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1), sep = "")
print (printer)
}
}
?paste
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1), sep = "")
cat (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", i - 1), rep("*", i * 2 - 1), rep(" ", i - 1), sep = "")
cat (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", i - 1), rep("*", i * 2 - 1), rep(" ", i - 1), sep = "")
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - i + 1), rep("*", i * 2 + 1), rep(" ", i - 1), sep = "")
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- c(rep(" ", n - i + 1), rep("*", i * 2 + 1), rep(" ", i - 1))
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- c(rep(" ", n - i + 1), rep("*", i * 2 - 1), rep(" ", n - i + 1))
print (printer)
}
}
Pyramid1(3)
Pyramid2 <- function(n){
for (i in 1:n){
for (sp in (n - i):1){
printSpace <- rep(" ", sp)
}
for (st in 1:i){
printStar <- rep("* ", st)
}
print c(printSpace, printStar)
}
}
Pyramid2 <- function(n){
for (i in 1:n){
for (sp in (n - i):1){
printSpace <- rep(" ", sp)
}
for (st in 1:i){
printStar <- rep("* ", st)
}
print (c(printSpace, printStar))
}
}
Pyramid2(3)
Pyramid2(4)
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- rep(" ", (n - i))
printStar <- rep("* ", i)
print (c(printSpace, printStar))
}
}
Pyramid2(4)
c(" ", "* ")
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- rep(" ", (n - i))
printStar <- rep("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
paste(" ", "* ", "* ", sep = "")
print(paste(" ", "* ", "* ", sep = ""))
rep("* ", 3)
"* " * 3
GenPrint <- function(char, rep){
output <- as.character()
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else if {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else if (rep == 1) {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
Pyramid2(10)
getwd()
setwd("/Volumes/Data Science/Google Drive/data_science_competition/kaggle/Santander_Customer_Satisfaction/")
rm(list = ls()); gc();
require(data.table)
require(purrr)
require(caret)
require(Metrics)
require(ggplot2)
require(ranger)
require(extraTrees)
require(caTools)
source("utilities/preprocess.R")
source("utilities/cv.R")
load("../data/Santander_Customer_Satisfaction/RData/dt_cleansed.RData")
#######################################################################################
## 1.0 train, valid, test #############################################################
#######################################################################################
cat("prepare train, valid, and test data set...\n")
set.seed(888)
ind.train <- createDataPartition(dt.cleansed[TARGET >= 0]$TARGET, p = .8, list = F) # remember to change it to .66
dt.train <- dt.cleansed[TARGET >= 0][ind.train]
dt.valid <- dt.cleansed[TARGET >= 0][-ind.train]
dt.test <- dt.cleansed[TARGET == -1]
dim(dt.train); dim(dt.valid); dim(dt.test)
table(dt.train$TARGET)
table(dt.valid$TARGET)
cat("folds ...\n")
k <- 5
set.seed(888)
folds <- createFolds(dt.train$TARGET, k = k, list = F)
cat("cv ...\n")
vec.result.dval <- rep(0, k)
vec.result.valid <- rep(0, k)
for(i in 1:k){
f <- folds == i
dtrain <- dt.train[!f]
dval <- dt.train[f]
md.et <- extraTrees(dt.train[, !c("ID", "TARGET"), with = F]
, dt.train$TARGET
, numThreads = 8
)
pred.dval.et <- predict(md.et, dval[, !c("ID", "TARGET"), with = F])
vec.result.dval[i] <- auc(dval$TARGET, pred.dval.et)
pred.valid.et <- predict(md.et, dt.valid[, !c("ID", "TARGET"), with = F])
vec.result.valid[i] <- auc(dt.valid$TARGET, pred.valid.et)
}
df.summary <- as.data.frame(mean.dval = mean(vec.result.dval)
, max.dval = max(vec.result.dval)
, min.dval = min(vec.result.dval)
, sd.dval = sd(vec.result.dval)
, mean.valid = mean(vec.result.valid)
, max.valid = max(vec.result.valid)
, min.valid = min(vec.result.valid)
, sd.valid = sd(vec.result.valid)
)
df.summary
vec.result.valid
vec.result.dval
df.summary
as.data.frame(mean.dval = mean(vec.result.dval)
, max.dval = max(vec.result.dval)
, min.dval = min(vec.result.dval)
, sd.dval = sd(vec.result.dval)
, mean.valid = mean(vec.result.valid)
, max.valid = max(vec.result.valid)
, min.valid = min(vec.result.valid)
, sd.valid = sd(vec.result.valid)
)
data.table(mean.dval = mean(vec.result.dval)
, max.dval = max(vec.result.dval)
, min.dval = min(vec.result.dval)
, sd.dval = sd(vec.result.dval)
, mean.valid = mean(vec.result.valid)
, max.valid = max(vec.result.valid)
, min.valid = min(vec.result.valid)
, sd.valid = sd(vec.result.valid)
)
options(java.parameters = "-Xmx8g" )
require(extraTrees)
cat("folds ...\n")
k <- 5
set.seed(888)
folds <- createFolds(dt.train$TARGET, k = k, list = F)
cat("cv ...\n")
vec.result.dval <- rep(0, k)
vec.result.valid <- rep(0, k)
for(i in 1:k){
f <- folds == i
dtrain <- dt.train[!f]
dval <- dt.train[f]
md.et <- extraTrees(dt.train[, !c("ID", "TARGET"), with = F]
, dt.train$TARGET
, numThreads = 8
)
pred.dval.et <- predict(md.et, dval[, !c("ID", "TARGET"), with = F])
vec.result.dval[i] <- auc(dval$TARGET, pred.dval.et)
pred.valid.et <- predict(md.et, dt.valid[, !c("ID", "TARGET"), with = F])
vec.result.valid[i] <- auc(dt.valid$TARGET, pred.valid.et)
}
df.summary <- data.table(mean.dval = mean(vec.result.dval)
, max.dval = max(vec.result.dval)
, min.dval = min(vec.result.dval)
, sd.dval = sd(vec.result.dval)
, mean.valid = mean(vec.result.valid)
, max.valid = max(vec.result.valid)
, min.valid = min(vec.result.valid)
, sd.valid = sd(vec.result.valid)
)
df.summary
install.packages("extraTree")
options(java.parameters = "-Xmx8g" )
require(extraTrees)
cat("folds ...\n")
k <- 5
set.seed(888)
folds <- createFolds(dt.train$TARGET, k = k, list = F)
cat("cv ...\n")
vec.result.dval <- rep(0, k)
vec.result.valid <- rep(0, k)
for(i in 1:k){
f <- folds == i
dtrain <- dt.train[!f]
dval <- dt.train[f]
md.et <- extraTrees(dt.train[, !c("ID", "TARGET"), with = F]
, dt.train$TARGET
, numThreads = 8
)
pred.dval.et <- predict(md.et, dval[, !c("ID", "TARGET"), with = F])
vec.result.dval[i] <- auc(dval$TARGET, pred.dval.et)
pred.valid.et <- predict(md.et, dt.valid[, !c("ID", "TARGET"), with = F])
vec.result.valid[i] <- auc(dt.valid$TARGET, pred.valid.et)
}
df.summary <- data.table(mean.dval = mean(vec.result.dval)
, max.dval = max(vec.result.dval)
, min.dval = min(vec.result.dval)
, sd.dval = sd(vec.result.dval)
, mean.valid = mean(vec.result.valid)
, max.valid = max(vec.result.valid)
, min.valid = min(vec.result.valid)
, sd.valid = sd(vec.result.valid)
)
df.summary
